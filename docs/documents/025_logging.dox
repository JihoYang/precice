/**
@page logging Logging

Logging
============================

Debug Output and Checks
-----------------------

Before using any of debugging/logging methods below you should set TRACE() at the beginning of the function.

- TRACE(parameters) entering and leaving that function, print the parameters. This call should go to the very top of a function.
- ERROR(message) unconditionally aborts the program. Should be used to catch user errors such as invalid configuration parameter combinations.
- CHECK(check, errorMessage) checks if check == true and otherwise emits errorMessage and aborts program.
- assertion(check) behaves like \c CHECK but should be used for programming errors and should therefore never happen to the user.
- DEBUG(stream) prints a debug message, depending on global log level configuration.
- INFO(stream) prints an info message, depending on global log level configuration.
- WARN(stream) prints a warning message, depending on global log level configuration.


Usage
-----
In order to use the aforementioned logging macros, you must declare a logger.

Header stub:
```
#include "logging/Logger.hpp"

namespace precice {
namespace whatever {

class MyClass {

private:
  logging::Logger _log{"whatever::MyClass"};
}

}}
```
If you use the logger in functions declared const and get error messages like
```
 error: passing 'const precice::logging::Logger' as 'this' argument discards qualifiers
```
use the `mutable` qualifier on the logger, e.g.
```
mutable logging::Logger _log{"whatever::MyClass"};
```

*/
